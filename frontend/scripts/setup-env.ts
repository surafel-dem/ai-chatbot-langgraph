#!/usr/bin/env bun
/**
 * Environment Setup Script for AI Chatbot
 * 
 * This script checks for required environment variables and helps set them up.
 */

import { existsSync, writeFileSync, readFileSync } from 'fs';
import { join } from 'path';

interface EnvConfig {
  key: string;
  description: string;
  required: boolean;
  example?: string;
  link?: string;
}

const requiredEnvVars: EnvConfig[] = [
  {
    key: 'NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY',
    description: 'Clerk publishable key for authentication',
    required: true,
    example: 'pk_test_...',
    link: 'https://clerk.com/docs/quickstarts/nextjs'
  },
  {
    key: 'CLERK_SECRET_KEY',
    description: 'Clerk secret key for server-side auth',
    required: true,
    example: 'sk_test_...',
    link: 'https://clerk.com/docs/quickstarts/nextjs'
  },
  {
    key: 'NEXT_PUBLIC_CONVEX_URL',
    description: 'Convex deployment URL (auto-generated)',
    required: true,
    example: 'https://your-deployment.convex.cloud'
  },
  {
    key: 'CONVEX_DEPLOYMENT',
    description: 'Convex deployment ID (auto-generated)',
    required: true,
    example: 'dev:your-deployment'
  },
  {
    key: 'OPENAI_API_KEY',
    description: 'OpenAI API key for AI features',
    required: false,
    example: 'sk-...',
    link: 'https://platform.openai.com/api-keys'
  },
  {
    key: 'ANTHROPIC_API_KEY',
    description: 'Anthropic API key for Claude models',
    required: false,
    example: 'sk-ant-...',
    link: 'https://console.anthropic.com/'
  }
];

const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  bold: '\x1b[1m'
};

function log(message: string, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

function checkEnvFile(): Record<string, string> {
  const envPath = '.env.local';
  const envExists = existsSync(envPath);
  
  if (!envExists) {
    log('\nüìù Creating .env.local file...', colors.yellow);
    const template = `# AI Chatbot Environment Variables
# Generated by setup script

# =============================================================================
# AUTHENTICATION (Required)
# Get these from: https://clerk.com/docs/quickstarts/nextjs
# =============================================================================
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=
CLERK_SECRET_KEY=

# =============================================================================
# DATABASE (Auto-generated by Convex)
# These will be populated when you run: bun run convex:dev
# =============================================================================
NEXT_PUBLIC_CONVEX_URL=
CONVEX_DEPLOYMENT=

# =============================================================================
# AI PROVIDERS (Optional - add at least one)
# =============================================================================
OPENAI_API_KEY=
ANTHROPIC_API_KEY=

# =============================================================================
# ANALYTICS (Optional)
# =============================================================================
VERCEL_ANALYTICS_ID=
`;
    
    writeFileSync(envPath, template);
    log('‚úÖ Created .env.local template', colors.green);
    return {};
  }

  // Parse existing env file
  const envContent = readFileSync(envPath, 'utf-8');
  const envVars: Record<string, string> = {};
  
  envContent.split('\n').forEach(line => {
    const trimmed = line.trim();
    if (trimmed && !trimmed.startsWith('#')) {
      const [key, ...valueParts] = trimmed.split('=');
      if (key && valueParts.length > 0) {
        envVars[key.trim()] = valueParts.join('=').trim();
      }
    }
  });

  return envVars;
}

function validateEnvironment(envVars: Record<string, string>): void {
  let hasErrors = false;
  let hasWarnings = false;

  log('\nüîç Checking environment variables...', colors.blue);

  for (const config of requiredEnvVars) {
    const value = envVars[config.key];
    const isEmpty = !value || value.trim() === '';

    if (config.required && isEmpty) {
      log(`‚ùå Missing required: ${config.key}`, colors.red);
      log(`   ${config.description}`, colors.reset);
      if (config.example) {
        log(`   Example: ${config.example}`, colors.cyan);
      }
      if (config.link) {
        log(`   Setup: ${config.link}`, colors.blue);
      }
      log('', colors.reset);
      hasErrors = true;
    } else if (!config.required && isEmpty) {
      log(`‚ö†Ô∏è  Optional: ${config.key}`, colors.yellow);
      log(`   ${config.description}`, colors.reset);
      hasWarnings = true;
    } else {
      log(`‚úÖ ${config.key}`, colors.green);
    }
  }

  if (hasErrors) {
    log('\n‚ùå Setup incomplete. Please add the missing required variables to .env.local', colors.red);
    process.exit(1);
  }

  if (hasWarnings) {
    log('\n‚ö†Ô∏è  Some optional variables are missing. Add them to .env.local for full functionality.', colors.yellow);
  }

  if (!hasErrors && !hasWarnings) {
    log('\n‚úÖ All environment variables are configured!', colors.green);
  }
}

function showInstructions(): void {
  log('\nüìã Quick Setup Instructions:', colors.bold);
  log('\n1. Clerk Authentication:', colors.cyan);
  log('   ‚Ä¢ Go to https://clerk.com/');
  log('   ‚Ä¢ Create an application');
  log('   ‚Ä¢ Copy the publishable and secret keys to .env.local');

  log('\n2. Convex Database:', colors.cyan);
  log('   ‚Ä¢ Run: bun run convex:dev');
  log('   ‚Ä¢ This will automatically populate CONVEX_* variables');

  log('\n3. AI Providers (optional):', colors.cyan);
  log('   ‚Ä¢ OpenAI: https://platform.openai.com/api-keys');
  log('   ‚Ä¢ Anthropic: https://console.anthropic.com/');

  log('\n4. Start Development:', colors.cyan);
  log('   ‚Ä¢ Run: bun run dev');

  log('\nüöÄ Happy coding!', colors.green);
}

async function main() {
  log('ü§ñ AI Chatbot Environment Setup', colors.bold + colors.blue);
  log('==================================', colors.blue);

  try {
    const envVars = checkEnvFile();
    validateEnvironment(envVars);
    showInstructions();
  } catch (error) {
    log(`\nüí• Setup failed: ${error instanceof Error ? error.message : 'Unknown error'}`, colors.red);
    process.exit(1);
  }
}

if (import.meta.main) {
  main();
}